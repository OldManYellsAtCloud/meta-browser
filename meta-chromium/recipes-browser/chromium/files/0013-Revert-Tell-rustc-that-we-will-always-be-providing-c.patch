From 0b85ec304cb6c6927942c1714a8002592d889d64 Mon Sep 17 00:00:00 2001
From: Max Ihlenfeldt <max@igalia.com>
Date: Tue, 3 Dec 2024 16:11:37 +0000
Subject: [PATCH] Revert "Tell rustc that we will always be providing clangrt
 libraries"

https://crrev.com/c/5913992 added `-Zexternal-clangrt` to the default
Rust compiler flags. That option is only available since Rust 1.78, but
Scarthgap is still using Rust 1.75.

Upstream-Status: Inappropriate [specific to older versions of Rust]
Signed-off-by: Max Ihlenfeldt <max@igalia.com>
---
 build/config/compiler/BUILD.gn |  3 ---
 build/rust/std/BUILD.gn        | 46 ++++++++++++++++++++++++++++++++++
 2 files changed, 46 insertions(+), 3 deletions(-)

diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index f162751..d04e731 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -1041,9 +1041,6 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
-
-    # We use clang-rt sanitizer runtimes.
-    "-Zexternal-clangrt",
   ]

   if (!is_win || force_rustc_color_output) {
diff --git a/build/rust/std/BUILD.gn b/build/rust/std/BUILD.gn
index 136d06b..a6d4795 100644
--- a/build/rust/std/BUILD.gn
+++ b/build/rust/std/BUILD.gn
@@ -237,6 +237,51 @@ if (toolchain_has_rust) {
       visibility = [ ":*" ]
     }

+    # When given -Zsanitize=..., rustc insists on passing a sanitizer runtime to
+    # the linker it invokes. Unfortunately, our C++ ldflags already tell the
+    # linker to link against a C++ sanitizer runtime - which contains the same
+    # symbols. So, make a blank library.
+    # The list of relevant sanitizers here is taken from
+    # https://github.com/rust-lang/rust/blob/7e7483d26e3cec7a44ef00cf7ae6c9c8c918bec6/compiler/rustc_codegen_ssa/src/back/link.rs#L1148
+    template("rustc_sanitizer_runtime") {
+      rt_name = target_name
+      not_needed([ "invoker" ])
+      static_library("sanitizer_rt_$rt_name") {
+        sources = []
+        output_name = "librustc-${rust_channel}_rt.$rt_name"
+        output_dir = "$local_rustc_sysroot/$sysroot_lib_subdir"
+        if (is_win) {
+          arflags = [ "/llvmlibempty" ]
+        }
+      }
+    }
+    rustc_sanitizer_runtimes = []
+    if (is_asan) {
+      rustc_sanitizer_runtime("asan") {
+      }
+      rustc_sanitizer_runtimes += [ ":sanitizer_rt_asan" ]
+    }
+    if (is_lsan) {
+      rustc_sanitizer_runtime("lsan") {
+      }
+      rustc_sanitizer_runtimes += [ ":sanitizer_rt_lsan" ]
+    }
+    if (is_msan) {
+      rustc_sanitizer_runtime("msan") {
+      }
+      rustc_sanitizer_runtimes += [ ":sanitizer_rt_msan" ]
+    }
+    if (is_tsan) {
+      rustc_sanitizer_runtime("tsan") {
+      }
+      rustc_sanitizer_runtimes += [ ":sanitizer_rt_tsan" ]
+    }
+    if (is_hwasan) {
+      rustc_sanitizer_runtime("hwasan") {
+      }
+      rustc_sanitizer_runtimes += [ ":sanitizer_rt_hwasan" ]
+    }
+
     # Builds and links against the Rust stdlib. Both Rust and C++ targets should
     # depend on this, as it provides the path to the library and includes the
     # allocator hooks.
@@ -255,6 +300,7 @@ if (toolchain_has_rust) {
       foreach(libname, stdlib_files + skip_stdlib_files) {
         deps += [ "rules:$libname" ]
       }
+      deps += rustc_sanitizer_runtimes

       public_deps = [ ":remap_alloc" ]
     }
